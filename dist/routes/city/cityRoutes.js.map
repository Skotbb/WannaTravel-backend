{"version":3,"sources":["../../../routes/city/cityRoutes.js"],"names":["express","require","_","Horseman","parsingManager","databaseName","router","Router","get","req","res","next","socket","setTimeout","addListener","destroy","find","err","countries","render","title","message","country","console","log","name","getCities","searchUrl","cities","city","findOrCreate","search","countryId","_id","createdCity","created","addToSet","save","saved","redirect","e","module","exports"],"mappings":"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","file":"cityRoutes.js","sourcesContent":["let express = require('express');\r\nconst _ = require('lodash')\r\n\r\nimport {getUrl, getTravelDates} from '../../public/javascripts/utils'\r\nlet Horseman = require('node-horseman')\r\nlet parsingManager = require('../../public/javascripts/parsingManager')\r\nlet databaseName = require('../../travel-settings')\r\n\r\n//Models\r\nimport {Country} from '../../models/country'\r\nimport {City} from '../../models/city'\r\nimport {Flight} from '../../models/flight'\r\n\r\nlet router = express.Router();\r\n\r\nrouter.get('/getForAllCountries', function (req, res, next) {\r\n\treq.socket.setTimeout(10 * 60 * 1000)\r\n\treq.socket.addListener('timeout', function () {\r\n\t\treq.socket.destroy()\r\n\t})\r\n\r\n\t// await mongoose.connect(`mongodb://localhost/${databaseName.databaseName}`);\r\n\t// let db = mongoose.connection;\r\n\r\n\ttry {\r\n\t\tCountry.find({}, async (err, countries) => {\r\n\t\t\t// If errors. Shit.\r\n\t\t\tif (err) {\r\n\t\t\t\tres.render('response', {title: \"Oops\", message: \"Something went wrong. \" + err})\r\n\t\t\t}\r\n\t\t\t//If there are countries in the db.\r\n\t\t\tif (countries) {\r\n\t\t\t\tfor (let country of countries) {    //For each country in the db\r\n\t\t\t\t\tconsole.log(`Getting cities for ${country.name}`)\r\n\r\n\t\t\t\t\tlet cities = await parsingManager.getCities(country.searchUrl)    // Get cities attached to country.\r\n\t\t\t\t\tconsole.log(\"Got cities.\")\r\n\t\t\t\t\tfor (let city of cities) {        // For each city in the list.\r\n\t\t\t\t\t\tconsole.log(`Checking ${city.name}`)\r\n\r\n\t\t\t\t\t\t// let dbCity = await City.addCity(city, country)  // Add city to db and return it\r\n\t\t\t\t\t\tCity.findOrCreate({name: city.name}, {\r\n\t\t\t\t\t\t\tsearchUrl: city.search,\r\n\t\t\t\t\t\t\tcountryId: country._id,\r\n\t\t\t\t\t\t}, function(err, createdCity, created) {\r\n\t\t\t\t\t\t\tcountry.cities.addToSet(createdCity._id);      // Add city id to country's city array.\r\n\t\t\t\t\t\t\tcountry.save((err,saved) => {             // And save.\r\n\t\t\t\t\t\t\t\tif(err){\r\n\t\t\t\t\t\t\t\t\tconsole.log(err)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(saved){\r\n\t\t\t\t\t\t\t\t\tconsole.log(\"Country updated.\")\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t})\r\n\r\n\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} else {  //No Countries in db.\r\n\t\t\t\tconsole.log(\"Redirecting to get countries.\")\r\n\t\t\t\tres.redirect('/country/get')\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tres.render('results', {title: \"Cities\", message: \"Added cities to database!\"})\r\n\t} catch (e) {\r\n\t\tres.render('results', {title: \"Oops!\", message: \"Something went wrong! \" + e})\r\n\t}\r\n})\r\n\r\n\r\n////////////// Helper functions ///////////////////////\r\n\r\n\r\n\r\nmodule.exports = router;"]}