{"version":3,"sources":["../../../routes/flight/flightRoutes.js"],"names":["express","require","_","parsingManager","router","Router","get","req","res","next","socket","setTimeout","addListener","destroy","days","params","dow","dayOfWeek","dates","find","err","cities","render","title","message","city","console","log","name","newUrl","searchUrl","dep","ret","datedate","getFlights","flight","findOrCreate","tripDuration","toString","cityName","cityId","_id","date","best","cheapest","createdFlight","created","flights","addToSet","price","save","saved","redirect","e","module","exports"],"mappings":"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","file":"flightRoutes.js","sourcesContent":["let express = require('express');\r\nconst _ = require('lodash')\r\n\r\nimport {updateFlightUrl, getTravelDates, getDate} from '../../public/javascripts/utils'\r\n\r\nlet parsingManager = require('../../public/javascripts/parsingManager')\r\n\r\n\r\n//Models\r\nimport {Country} from '../../models/country'\r\nimport {City} from '../../models/city'\r\nimport {Flight} from '../../models/flight'\r\n\r\nlet router = express.Router();\r\n\r\nrouter.get('/getForAllCities/:days/:dayOfWeek', function (req, res, next) {\r\n\treq.socket.setTimeout(10 * 60 * 1000)\r\n\treq.socket.addListener('timeout', function () {\r\n\t\treq.socket.destroy()\r\n\t})\r\n\r\n\tlet days = req.params.days\r\n\tlet dow = req.params.dayOfWeek\r\n\r\n\tlet dates = getTravelDates(dow, days);\r\n\r\n\ttry {\r\n\t\tCity.find({}, async (err, cities) => {\r\n\t\t\t// If errors. Shit.\r\n\t\t\tif (err) {\r\n\t\t\t\tres.render('response', {title: \"Oops\", message: \"Something went wrong. \" + err})\r\n\t\t\t}\r\n\t\t\t//If there are cities in the db.\r\n\t\t\tif (cities) {\r\n\t\t\t\tfor (let city of cities) {    //For each city in the db\r\n\t\t\t\t\tconsole.log(`Getting flights for ${city.name}`)\r\n\t\t\t\t\tlet newUrl = updateFlightUrl(city.searchUrl, dates.dep, dates.ret)\r\n\t\t\t\t\tlet datedate = getDate(dates.dep)\r\n\t\t\t\t\tlet flight = await parsingManager.getFlights(newUrl)    // Get flights attached to city.\r\n\t\t\t\t\tconsole.log(\"Got flight.\")\r\n\r\n\t\t\t\t\t// For the flight.\r\n\t\t\t\t\tconsole.log(`Checking flights`)\r\n\r\n\t\t\t\t\tFlight.findOrCreate({searchUrl: newUrl}, {\r\n\t\t\t\t\t\ttripDuration: days,\r\n\t\t\t\t\t\tdayOfWeek: dow.toString(),\r\n\t\t\t\t\t\tcityName: city.name,\r\n\t\t\t\t\t\tcityId: city._id,\r\n\t\t\t\t\t\tdate: datedate,\r\n\t\t\t\t\t\tbest: flight.best,\r\n\t\t\t\t\t\tcheapest: flight.cheapest,\r\n\t\t\t\t\t\tsearchUrl: newUrl\r\n\t\t\t\t\t}, function (err, createdFlight, created) {\r\n\r\n\t\t\t\t\t\tcity.flights.addToSet(createdFlight._id);      // Add flight id to city's flight array.\r\n\t\t\t\t\t\tif (!created) {\r\n\t\t\t\t\t\t\tif (createdFlight.best.price != flight.best.price || createdFlight.cheapest.price != flight.cheapest.price) {\r\n\t\t\t\t\t\t\t\tconsole.log(`Best flight was $${createdFlight.best.price} and is now $${flight.best.price}`)\r\n\t\t\t\t\t\t\t\tconsole.log(`Cheapest flight was $${createdFlight.cheapest.price} and is now $${flight.cheapest.price}`)\r\n\t\t\t\t\t\t\t\tcreatedFlight.best.price = flight.best.price\r\n\t\t\t\t\t\t\t\tcreatedFlight.cheapest.price = flight.cheapest.price\r\n\t\t\t\t\t\t\t\tcreatedFlight.save((err, save) => {\r\n\t\t\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\t\t\tthrow err\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tconsole.log(`Flight to ${save.cityName} had prices updated.`)\r\n\t\t\t\t\t\t\t\t})\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcity.save((err, saved) => {              // And save.\r\n\t\t\t\t\t\t\tif (err) {\r\n\t\t\t\t\t\t\t\tconsole.log(err)\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tif (saved) {\r\n\t\t\t\t\t\t\t\tconsole.log(\"City updated.\")\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t})\r\n\r\n\r\n\t\t\t\t}\r\n\t\t\t} else {  //No Countries in db.\r\n\t\t\t\tconsole.log(\"Redirecting to get cities.\")\r\n\t\t\t\tres.redirect('/city/getForAllCountries')\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\tres.render('results', {title: \"Flights!\", message: \"Added Flights to database!\"})\r\n\t} catch (e) {\r\n\t\tres.render('results', {title: \"Oops!\", message: \"Something went wrong! \" + e})\r\n\t}\r\n})\r\n\r\n\r\n////////////// Helper functions ///////////////////////\r\n\r\n\r\nmodule.exports = router;"]}