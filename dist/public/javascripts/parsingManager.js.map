{"version":3,"sources":["../../../public/javascripts/parsingManager.js"],"names":["url","horseman","Horseman","timeout","result","console","log","open","status","waitForSelector","click","screenshot","evaluate","cities","$","find","children","each","name","text","searchHref","attr","city","search","push","then","results","close","getCities","wait","settings","searchTime","cheapInner","document","getElementById","querySelector","cPrice","innerText","cDur","bestInner","bPrice","bDur","cheapest","price","parseInt","duration","best","catch","err","getFlights","moment","require","parseCountry","countryArray","country","flights"],"mappings":"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","file":"parsingManager.js","sourcesContent":["const moment = require('moment')\r\nlet Horseman = require('node-horseman')\r\nlet settings = require('../../travel-settings')\r\n\r\nconst parseCountry = async (countryArray) => {\r\n\tlet cities = []\r\n\t//console.log(\"Parsing Countries\")\r\n\r\n\ttry {\r\n\t\tfor (let country of countryArray) {\r\n\t\t\tcountry.cities = await getCities(country.search)\r\n\t\t\tconsole.log(`Country: ${country.name}`)\r\n\r\n\t\t\tfor(let city of country.cities) {\r\n\t\t\t\tcity.flights = await getFlights(city.search)\r\n\t\t\t\tconsole.log(city.name)\r\n\t\t\t\tconsole.log(city.flights)\r\n\t\t\t}\r\n\t\t}\r\n\t\t// countryArray[2].cities = await getCities(countryArray[2].search)\r\n\r\n\r\n\t\treturn countryArray\r\n\t} catch (e) {\r\n\t\tconsole.log(e)\r\n\t}\r\n}\r\n\r\n/**\r\n * getCities Takes a country search url and parses the first row of cities\r\n * @param url - A Momondo-constructed search url\r\n * @returns {Promise.<void>}\r\n */\r\nexport async function getCities(url) {\r\n\tlet horseman = new Horseman({timeout: 30000})\r\n\tlet result\r\n\tconsole.log(\"Getting cities for country.\")\r\n\treturn horseman\r\n\t// .on(\"consoleMessage\", function (msg) {\r\n\t// \tconsole.log(msg);\r\n\t// })\r\n\t\t.open(url)\r\n\t\t//.log(\"Opened for Cities in Country\")\r\n\t\t.status()\r\n\t\t.waitForSelector('div.ng-scope > div > div.flexiblesearch-option-content > label:nth-child(2) > div > span')\r\n\t\t.click('div.ng-scope > div > div.flexiblesearch-option-content > label:nth-child(2) > div > span')\r\n\t\t.log(\"Sorting by most popular\")\r\n\t\t.waitForSelector('div.flexiblesearch-main.ng-scope > div:nth-child(2) > div > div.ng-scope > div:nth-child(1) > span:nth-child(1) > div > div > a > span.flexiblesearch-result-button.ng-scope')\r\n\t\t.screenshot(\"Cities.png\")\r\n\t\t.evaluate(function () {\r\n\t\t\tlet cities = []\r\n\t\t\tconsole.log(\"In city page.\")\r\n\r\n\t\t\t$('div.flexiblesearch-main.ng-scope > div:nth-child(2) > div > div:nth-child(2)').find(' > div:nth-child(1)').children()\r\n\t\t\t\t.each(function () {\r\n\t\t\t\t\tvar name = $(this).find('div > div.container > a > span.city.ng-binding').text()\r\n\t\t\t\t\tvar searchHref = $(this).find('div > div.container > a').attr('href')\r\n\t\t\t\t\t//console.log(name)\r\n\t\t\t\t\tvar city = {\r\n\t\t\t\t\t\tname: name,\r\n\t\t\t\t\t\tsearch: 'http://www.momondo.com' + searchHref\r\n\t\t\t\t\t}\r\n\t\t\t\t\tcities.push(city)\r\n\t\t\t\t})\r\n\t\t\t//TODO Add support for parsing a second row of cities.\r\n\r\n\t\t\treturn cities\r\n\t\t})\r\n\t\t.then(function (results) {\r\n\t\t\treturn result = results\r\n\t\t})\r\n\t\t.close()\r\n}\r\n\r\n/**\r\n * getFlights function returns a \"flight\" object that consists of {best: {price: , duration}, cheapest: {price: , duration}}\r\n * @param url - momondo constructed url that directs to the flight page in the search results.\r\n * @returns {Promise.<void>}\r\n */\r\nexport async function getFlights(url) {\r\n\tlet horseman = new Horseman({timeout: 60000})\r\n\tlet result\r\n\t//console.log(\"Parsing in flights.\")\r\n\treturn horseman\r\n\t// .on(\"consoleMessage\", function (msg) {\r\n\t// \tconsole.log(msg);\r\n\t// })\r\n\t\t.open(url)\r\n\t\t.log(\"Getting flights for City\")\r\n\t\t.status()\r\n\t\t.waitForSelector('div#searchProgressText')\r\n\t\t.wait(settings.searchTime)\r\n\t\t// .evaluate(function(){\r\n\t\t// \treturn document.getElementById('searchProgressText').innerText\r\n\t\t// })\r\n\t\t// .then(function(result) {\r\n\t\t// \tconsole.log(result)\r\n\t\t//\r\n\t\t// \tif(result !== \"Search complete\"){\r\n\t\t// \t\tthis.wait(5000)\r\n\t\t// \t}\r\n\t\t// })   //Good waitFor method\r\n\t\t// .waitFor(function(){\r\n\t\t// \treturn document.getElementById('searchProgressText').innerText === \"Search complete\"\r\n\t\t// }, true)\r\n\t\t.screenshot(\"Flights.png\")\r\n\t\t.evaluate(function () {\r\n\r\n\t\t\t\tconsole.log(\"In flight page.\")\r\n\t\t\t\tlet cheapInner = document.getElementById('flight-tickets-sortbar-cheapest').querySelector('.inner')\r\n\t\t\t\tlet cPrice = cheapInner.querySelector('span.price').querySelector('span.value').innerText\r\n\t\t\t\tlet cDur = cheapInner.querySelector('span.info').innerText\r\n\t\t\t\tlet bestInner = document.getElementById('flight-tickets-sortbar-bestdeal').querySelector('.inner')\r\n\t\t\t\tlet bPrice = bestInner.querySelector('span.price').querySelector('span.value').innerText\r\n\t\t\t\tlet bDur = bestInner.querySelector('span.info').innerText\r\n\t\t\t\t//console.log(nodeList)\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tcheapest: {\r\n\t\t\t\t\t\tprice: parseInt(cPrice) || -1,\r\n\t\t\t\t\t\tduration: cDur || \"Unavailable\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\tbest: {\r\n\t\t\t\t\t\tprice: parseInt(bPrice) || -1,\r\n\t\t\t\t\t\tduration: bDur || \"Unavailable\"\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t)\r\n\t\t.then(function (results) {\r\n\t\t\treturn result = results\r\n\t\t})\r\n\t\t.catch(function (err) {\r\n\t\t\tconsole.log(err)\r\n\t\t})\r\n\t\t.close()\r\n}"]}